"use client";

import { useState, useEffect } from "react";
import { useFormContext } from "../contexts/FormContext";
import OwnerTab from "./OwnerTab";
import OwnerTypeSelector from "./OwnerTypeSelector";
import OwnerDetails from "./OwnerDetails";
import OwnerLandRightForm from "./OwnerLandRightForm";
import { 
  useGetRightTypesQuery, 
  useGetLandUseTypesQuery, 
  useGetLandTitleHistoryQuery 
} from "../redux/api/apiSlice";

interface LandRight {
  righttype: string;
  landtitleno: string;
  issueno: string;
  registerbookno: string;
  registerno: string;
  approvaltype: string;
  lthistory: string;
  portion: string;
  landtitledate: string;
  landtitledeliverydate: string;
  classificationdate: string;
  printdate: string;
  announcementdate: string;
  guid?: string; // Database unique identifier
}

interface Owner {
  id: string;
  ownerType: 'person' | 'entity';
  portion: number;
  personData?: any;
  entityData?: any;
  landright: LandRight; // Each owner has their own landright data
}

// Define interface for landright data from API
interface ApiLandRight {
  righttype?: any;
  titlenumber?: string;
  titleeditionno?: string;
  landregisterbookno?: string;
  landregistersheetno?: string;
  approvaltype?: string;
  history?: string;
  part?: string;
  date_title_issued?: string;
  date_title_printed?: string;
  date_public_display?: string;
  gid?: string;
  parcelid?: string;
  ownerid?: string;
  valid_from?: string;
  valid_till?: string;
  owner?: {
    ownertype?: string;
    name?: string;
    entitytype?: string;
    title?: string;
    companyname?: string;
    nationality?: string;
    registrationno?: string;
    registrationdate?: string;
    businesstype?: string;
    government_workplace?: string;
    province?: string;
    district?: string;
    village?: string;
    unit?: string;
    road?: string;
    houseno?: string;
    [key: string]: any;
  };
  [key: string]: any;
}

export default function OwnerAndRightForm() {
  const { formData: contextFormData, updateOwnerForm, updateLandRightForm, isGovernmentLand, setIsGovernmentLand } = useFormContext();
  
  // Access the land data from the context
  const landData = contextFormData.land;
  
  // State to track if data has been loaded from search
  const [dataLoaded, setDataLoaded] = useState(false);
  
  // Function to reset the form data
  const resetFormData = () => {
    const defaultLandRight: LandRight = {
      righttype: "",
      landtitleno: "",
      issueno: "",
      registerbookno: "",
      registerno: "",
      approvaltype: "",
      lthistory: "",
      portion: "",
      landtitledate: "",
      landtitledeliverydate: "",
      classificationdate: "",
      printdate: "",
      announcementdate: "",
      guid: ""
    };
    
    // Reset to a single default owner
    const defaultOwner: Owner = {
      id: '1',
      ownerType: isGovernmentLand ? 'entity' as const : 'person' as const,
      portion: 100,
      personData: {},
      entityData: {},
      landright: defaultLandRight
    };
    
    setOwners([defaultOwner]);
    setActiveOwner(defaultOwner);
    setDataLoaded(false);
    
    // Update context
    updateOwnerForm({
      ownerType: defaultOwner.ownerType,
      personData: {},
      entityData: {}
    });
    
    updateLandRightForm(defaultLandRight);
    
    console.log('Owner and land right data reset');
  };
  
  // Set up synchronization when landData changes
  useEffect(() => {
    // When land form data changes (especially isstate), update the ownership data
    if (landData.isstate !== isGovernmentLand) {
      console.log('Syncing government land status from land form:', landData.isstate);
      setIsGovernmentLand(landData.isstate);
    }
    
    // If parcel changes (new search), reset form data
    if (landData.barcode && dataLoaded && !landData.searchResult) {
      console.log('Land parcel changed but no search results, resetting form data');
      resetFormData();
    }
    
    // If there's barcode/parcel info and we haven't loaded data yet, we can potentially load owner data
    if (landData.barcode && !dataLoaded && landData.searchResult) {
      console.log('Land has barcode and search results, loading owner data:', landData.barcode);
      
      try {
        // Get the search result data from the context
        const searchData = landData.searchResult;
        
        // Check if we have landrights data
        if (searchData.landrights && Array.isArray(searchData.landrights) && searchData.landrights.length > 0) {
          // Create updated owners array based on landrights
          const updatedOwners = searchData.landrights.map((landright: ApiLandRight, index: number) => {
            // Create base landright object with null handling
            const newLandRight: LandRight = {
              righttype: landright.righttype?.toString() ?? "",
              landtitleno: landright.titlenumber ?? "",
              issueno: landright.titleeditionno ?? "",
              registerbookno: landright.landregisterbookno ?? "",
              registerno: landright.landregistersheetno ?? "",
              approvaltype: landright.approvaltype ?? "",
              lthistory: landright.history ?? "",
              portion: landright.part ?? "100",
              landtitledate: landright.date_title_issued 
                ? new Date(landright.date_title_issued).toISOString().split('T')[0] 
                : "",
              landtitledeliverydate: landright.date_title_printed 
                ? new Date(landright.date_title_printed).toISOString().split('T')[0] 
                : "",
              classificationdate: landright.date_public_display 
                ? new Date(landright.date_public_display).toISOString().split('T')[0] 
                : "",
              printdate: landright.date_title_printed 
                ? new Date(landright.date_title_printed).toISOString().split('T')[0] 
                : "",
              announcementdate: landright.date_public_display 
                ? new Date(landright.date_public_display).toISOString().split('T')[0] 
                : "",
              guid: landright.gid ?? ""
            };
            
            // Prepare owner data
            let ownerType: 'person' | 'entity' = 'person';
            let personData = {};
            let entityData = {};
            
            // If we have owner information
            if (landright.owner) {
              const owner = landright.owner;
              
              // Determine owner type based on available data
              ownerType = (owner.ownertype === 'entity' || owner.entitytype || searchData.isstate) 
                ? 'entity' 
                : 'person';
                
              if (ownerType === 'person') {
                // For person type
                personData = {
                  title: owner.title ?? "",
                  firstname: owner.name ?? "",
                  lastname: "",  // Often not provided in API
                  birthdate: "",  // Often not provided in API
                  nationality: owner.nationality ?? "",
                  occupation: "",  // Often not provided in API
                  idcardno: owner.registrationno ?? "",
                  idcarddate: owner.registrationdate 
                    ? new Date(owner.registrationdate).toISOString().split('T')[0] 
                    : "",
                  governmentplace: owner.government_workplace ?? "",
                  familybookno: "",  // Often not provided in API
                  fathername: "",  // Often not provided in API
                  mothername: "",  // Often not provided in API
                  province: owner.province ?? "",
                  district: owner.district ?? "",
                  village: owner.village ?? "",
                  unit: owner.unit ?? "",
                  street: owner.road ?? "",
                  houseno: owner.houseno ?? ""
                };
              } else {
                // For entity type
                entityData = {
                  title: owner.title ?? "",
                  fullname: owner.name ?? "",
                  entitytype: owner.entitytype ?? "",
                  regno: owner.registrationno ?? "",
                  regdate: owner.registrationdate 
                    ? new Date(owner.registrationdate).toISOString().split('T')[0] 
                    : "",
                  businesstype: owner.businesstype ?? "",
                  nationality: owner.nationality ?? "",
                  governmentplace: owner.government_workplace ?? "",
                  companyname: owner.companyname ?? owner.name ?? "",
                  province: owner.province ?? "",
                  district: owner.district ?? "",
                  village: owner.village ?? "",
                  unit: owner.unit ?? "",
                  road: owner.road ?? "",
                  houseno: owner.houseno ?? ""
                };
              }
            }
            
            // For portions, divide 100% equally among rights if not specified
            const portionValue = landright.part 
              ? parseInt(landright.part)
              : Math.floor(100 / searchData.landrights.length);
                
            // Create the final owner object
            return {
              id: index === 0 ? '1' : Date.now().toString() + index, // First owner gets id '1', others get unique ids
              ownerType,
              portion: portionValue,
              personData,
              entityData,
              landright: newLandRight
            };
          });
          
          // If we have owner data, update the state
          if (updatedOwners.length > 0) {
            // Make sure portions add up to 100%
            const ownersTotalPortion = updatedOwners.reduce((sum: number, owner: Owner) => sum + owner.portion, 0);
            
            // If total isn't 100, adjust the last owner's portion to make it 100
            if (ownersTotalPortion !== 100) {
              const difference = 100 - ownersTotalPortion;
              updatedOwners[updatedOwners.length - 1].portion += difference;
            }
            
            setOwners(updatedOwners);
            setActiveOwner(updatedOwners[0]);
            
            // Update the context for backwards compatibility
            updateOwnerForm({
              ownerType: updatedOwners[0].ownerType,
              personData: updatedOwners[0].ownerType === 'person' ? updatedOwners[0].personData : {},
              entityData: updatedOwners[0].ownerType === 'entity' ? updatedOwners[0].entityData : {},
              allOwners: updatedOwners
            });
            
            updateLandRightForm({
              ...updatedOwners[0].landright,
              ownerCount: updatedOwners.length
            });
            
            // Mark as loaded to prevent re-loading
            setDataLoaded(true);
            console.log(`Loaded ${updatedOwners.length} owner(s) and landright data from search results`);
          }
        }
      } catch (error) {
        console.error('Error loading owner data from search results:', error);
      }
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [landData, isGovernmentLand, setIsGovernmentLand, dataLoaded]);
  
  // State for managing multiple owners
  const [owners, setOwners] = useState<Owner[]>([
    {
      id: '1',
      ownerType: contextFormData.owner?.ownerType || (isGovernmentLand ? 'entity' : 'person'),
      portion: 100,
      personData: contextFormData.owner?.personData || {},
      entityData: contextFormData.owner?.entityData || {},
      landright: {
        righttype: contextFormData.landright.righttype || "",
        landtitleno: contextFormData.landright.landtitleno || "",
        issueno: contextFormData.landright.issueno || "",
        registerbookno: contextFormData.landright.registerbookno || "",
        registerno: contextFormData.landright.registerno || "",
        approvaltype: contextFormData.landright.approvaltype || "",
        lthistory: contextFormData.landright.lthistory || "",
        portion: contextFormData.landright.portion || "",
        landtitledate: contextFormData.landright.landtitledate || "",
        landtitledeliverydate: contextFormData.landright.landtitledeliverydate || "",
        classificationdate: contextFormData.landright.classificationdate || "",
        printdate: contextFormData.landright.printdate || "",
        announcementdate: contextFormData.landright.announcementdate || "",
        guid: contextFormData.landright.guid || ""
      }
    }
  ]);
  
  // State for the current active owner
  const [activeOwner, setActiveOwner] = useState<Owner>(owners[0]);
  
  // RTK Query hooks for data fetching
  const { data: rightTypes = [], isLoading: loadingRightTypes } = useGetRightTypesQuery();
  const { data: landUseTypes = [], isLoading: loadingLandUseTypes } = useGetLandUseTypesQuery();
  const { data: landTitleHistory = [], isLoading: loadingLandTitleHistory } = useGetLandTitleHistoryQuery();

  // Update owner type when isGovernmentLand changes
  useEffect(() => {
    if (isGovernmentLand) {
      // Update all owners to entity type if it's government land
      const updatedOwners = owners.map(owner => ({
        ...owner,
        ownerType: 'entity' as 'entity'
      }));
      setOwners(updatedOwners);
      
      // Update active owner
      if (activeOwner) {
        setActiveOwner({
          ...activeOwner,
          ownerType: 'entity' as 'entity'
        });
      }
      
      // Update context directly
      updateOwnerForm({
        ...contextFormData.owner,
        ownerType: 'entity' as 'entity'
      });
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isGovernmentLand]);
  
  // Functions for managing multiple owners
  const addOwner = () => {
    // Create empty landright for new owner
    const emptyLandRight: LandRight = {
      righttype: "",
      landtitleno: "",
      issueno: "",
      registerbookno: "",
      registerno: "",
      approvaltype: "",
      lthistory: "",
      portion: "",
      landtitledate: "",
      landtitledeliverydate: "",
      classificationdate: "",
      printdate: "",
      announcementdate: ""
    };
    
    const newOwner: Owner = {
      id: Date.now().toString(),
      ownerType: isGovernmentLand ? 'entity' : 'person',
      portion: 0,
      personData: {},
      entityData: {},
      landright: emptyLandRight
    };
    
    // Add new owner and set as active
    setOwners([...owners, newOwner]);
    setActiveOwner(newOwner);
  };
  
  const removeOwner = (id: string) => {
    if (owners.length <= 1) {
      alert("ຕ້ອງມີເຈົ້າຂອງຢ່າງໜ້ອຍ 1 ຄົນ");
      return;
    }
    
    const updatedOwners = owners.filter(owner => owner.id !== id);
    setOwners(updatedOwners);
    
    // If active owner was removed, set first owner as active
    if (activeOwner.id === id) {
      setActiveOwner(updatedOwners[0]);
    }
  };
  
  const selectOwner = (owner: Owner) => {
    setActiveOwner(owner);
  };
  
  const updateOwnerType = (id: string, type: 'person' | 'entity') => {
    if (isGovernmentLand && type === 'person') {
      // If it's government land, prevent changing to person
      return;
    }
    
    const updatedOwners = owners.map(owner => 
      owner.id === id ? { ...owner, ownerType: type as 'person' | 'entity' } : owner
    );
    setOwners(updatedOwners);
    
    // Update active owner if it's the one being changed
    if (activeOwner.id === id) {
      setActiveOwner({ ...activeOwner, ownerType: type as 'person' | 'entity' });
    }
    
    // Update context for backward compatibility
    if (id === owners[0].id) {
      updateOwnerForm({
        ...contextFormData.owner,
        ownerType: type
      });
    }
  };
  
  const updateOwnerPortion = (id: string, portion: number) => {
    const updatedOwners = owners.map(owner => 
      owner.id === id ? { ...owner, portion, landright: { ...owner.landright, portion: portion.toString() } } : owner
    );
    setOwners(updatedOwners);
    
    // Update active owner if it's the one being changed
    if (activeOwner.id === id) {
      setActiveOwner({ 
        ...activeOwner, 
        portion, 
        landright: { ...activeOwner.landright, portion: portion.toString() } 
      });
    }
    
    // Update context for backward compatibility (only for first owner)
    if (id === owners[0].id) {
      updateLandRightForm({
        ...contextFormData.landright,
        portion: portion.toString()
      });
    }
  };
  
  const updateOwnerData = (id: string, data: any) => {
    const updatedOwners = owners.map(owner => {
      if (owner.id === id) {
        return { 
          ...owner, 
          ...(owner.ownerType === 'person' 
            ? { personData: { ...owner.personData, ...data } }
            : { entityData: { ...owner.entityData, ...data } }
          )
        };
      }
      return owner;
    });
    
    setOwners(updatedOwners);
    
    // Update active owner if it's the one being changed
    if (activeOwner.id === id) {
      if (activeOwner.ownerType === 'person') {
        setActiveOwner({ 
          ...activeOwner, 
          personData: { ...activeOwner.personData, ...data } 
        });
      } else {
        setActiveOwner({ 
          ...activeOwner, 
          entityData: { ...activeOwner.entityData, ...data } 
        });
      }
    }
    
    // Update context for backward compatibility
    if (id === owners[0].id) {
      if (activeOwner.ownerType === 'person') {
        updateOwnerForm({
          ...contextFormData.owner,
          personData: { ...contextFormData.owner.personData, ...data }
        });
      } else {
        updateOwnerForm({
          ...contextFormData.owner,
          entityData: { ...contextFormData.owner.entityData, ...data }
        });
      }
    }
  };
  
  // Handle land right form changes - now for specific owner
  const handleLandRightChange = (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    // Update the landright for the specific owner
    const updatedOwners = owners.map(owner => {
      if (owner.id === id) {
        return {
          ...owner,
          landright: {
            ...owner.landright,
            [name]: value
          }
        };
      }
      return owner;
    });
    
    setOwners(updatedOwners);
    
    // Update active owner if it's the one being changed
    if (activeOwner.id === id) {
      setActiveOwner({
        ...activeOwner,
        landright: {
          ...activeOwner.landright,
          [name]: value
        }
      });
    }
    
    // Update context for backward compatibility (only for first owner)
    if (id === owners[0].id) {
      updateLandRightForm({
        ...contextFormData.landright,
        [name]: value
      });
    }
  };
  
  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Check if owner portions add up to 100%
    const totalPortion = owners.reduce((sum: number, owner: Owner) => sum + (owner.portion || 0), 0);
    if (totalPortion !== 100) {
      alert(`ສ່ວນແບ່ງຂອງເຈົ້າຂອງທັງໝົດຕ້ອງລວມກັນໄດ້ 100%. ປັດຈຸບັນແມ່ນ ${totalPortion}%`);
      return;
    }
    
    // Check if we have a land parcel reference
    if (!landData.barcode && !landData.parcelno) {
      alert("ກະລຸນາບັນທຶກຂໍ້ມູນຕອນດິນກ່ອນບັນທຶກຂໍ້ມູນເຈົ້າຂອງ");
      return;
    }
    
    // Prepare data for API submission with null handling
    const ownersWithRights = owners.map(owner => {
      // Prepare person data with null handling
      const cleanPersonData = owner.ownerType === 'person' ? Object.entries(owner.personData || {}).reduce((acc: Record<string, any>, [key, value]) => {
        acc[key] = value === "" ? null : value;
        return acc;
      }, {} as Record<string, any>) : null;
      
      // Prepare entity data with null handling
      const cleanEntityData = owner.ownerType === 'entity' ? Object.entries(owner.entityData || {}).reduce((acc: Record<string, any>, [key, value]) => {
        acc[key] = value === "" ? null : value;
        return acc;
      }, {} as Record<string, any>) : null;
      
      // Prepare landright data with null handling
      const cleanLandright = Object.entries(owner.landright || {}).reduce((acc: Record<string, any>, [key, value]) => {
        acc[key] = value === "" ? null : value;
        return acc;
      }, {} as Record<string, any>);
      
      return {
      ownerId: owner.id,
      ownerType: owner.ownerType,
        portion: owner.portion || 0,
        personData: cleanPersonData,
        entityData: cleanEntityData,
        landright: cleanLandright,
        parcelReference: landData.barcode || `${landData.parcelno}-${landData.cadastremapno}`
      };
    });
    
    console.log(`Submitting ${owners.length} owner(s) with land rights:`, ownersWithRights);
    
    // In a real implementation, you would send this data to your API
    // For now, we'll just update the context
    updateOwnerForm({
      ownerType: owners[0].ownerType,
      personData: owners[0].ownerType === 'person' ? owners[0].personData : {},
      entityData: owners[0].ownerType === 'entity' ? owners[0].entityData : {},
      allOwners: ownersWithRights
    });
    
    updateLandRightForm({
      ...owners[0].landright,
      ownerCount: owners.length
    });
    
    alert(`ຂໍ້ມູນເຈົ້າຂອງ ${owners.length} ຄົນ ຖືກບັນທຶກແລ້ວ`);
  };
  
  return (
    <div className="space-y-8">
    
      {/* Owners Section with tabs */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-black dark:text-white">
            ເຈົ້າຂອງທີ່ດິນ
          </h2>
          <button 
            onClick={addOwner}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            type="button"
          >
            ເພີ່ມເຈົ້າຂອງ
          </button>
        </div>
        
        {/* Owner tabs navigation */}
        <OwnerTab 
          owners={owners} 
          activeOwner={activeOwner} 
          onSelectOwner={selectOwner} 
        />
        
        {/* Active owner form */}
        {activeOwner && (
          <div className="space-y-6">
            <div className="flex justify-between items-center mb-4">
              <div className="space-y-4">
                {/* Owner type selector component */}
                <OwnerTypeSelector 
                  ownerId={activeOwner.id}
                  ownerType={activeOwner.ownerType}
                  isGovernmentLand={isGovernmentLand}
                  onTypeChange={updateOwnerType}
                />
              </div>
              
              {owners.length > 1 && (
                <button 
                  onClick={() => removeOwner(activeOwner.id)}
                  className="text-red-600 hover:text-red-800"
                  type="button"
                >
                  ລຶບເຈົ້າຂອງນີ້
                </button>
              )}
            </div>
            
            {/* Owner Information Section */}
            <OwnerDetails 
              ownerId={activeOwner.id}
              ownerType={activeOwner.ownerType}
              personData={activeOwner.personData}
              entityData={activeOwner.entityData}
              onUpdateOwnerData={updateOwnerData}
            />
            
            {/* Land Rights Section for this owner */}
            <OwnerLandRightForm 
              ownerId={activeOwner.id}
              landright={activeOwner.landright}
              onChange={handleLandRightChange}
              onPortionChange={updateOwnerPortion}
            />
          </div>
        )}
      </div>
      
      {/* Submit Button */}
      <div className="flex justify-end">
        <button
          onClick={handleSubmit}
          className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
          type="button"
        >
          ບັນທຶກຂໍ້ມູນ
        </button>
      </div>
    </div>
  );
} 